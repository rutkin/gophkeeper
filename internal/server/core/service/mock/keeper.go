// Code generated by MockGen. DO NOT EDIT.
// Source: ../port/keeper.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/rutkin/gophkeeper/internal/server/core/domain"
)

// MockKeeper is a mock of Keeper interface.
type MockKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperMockRecorder
}

// MockKeeperMockRecorder is the mock recorder for MockKeeper.
type MockKeeperMockRecorder struct {
	mock *MockKeeper
}

// NewMockKeeper creates a new mock instance.
func NewMockKeeper(ctrl *gomock.Controller) *MockKeeper {
	mock := &MockKeeper{ctrl: ctrl}
	mock.recorder = &MockKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeper) EXPECT() *MockKeeperMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeeper) Delete(ctx context.Context, dataCtx domain.DataContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, dataCtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeeperMockRecorder) Delete(ctx, dataCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeeper)(nil).Delete), ctx, dataCtx)
}

// GetBankData mocks base method.
func (m *MockKeeper) GetBankData(ctx context.Context, dataCtx domain.DataContext) (domain.BankData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankData", ctx, dataCtx)
	ret0, _ := ret[0].(domain.BankData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankData indicates an expected call of GetBankData.
func (mr *MockKeeperMockRecorder) GetBankData(ctx, dataCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankData", reflect.TypeOf((*MockKeeper)(nil).GetBankData), ctx, dataCtx)
}

// GetBinaryData mocks base method.
func (m *MockKeeper) GetBinaryData(ctx context.Context, dataCtx domain.DataContext) (domain.BinaryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryData", ctx, dataCtx)
	ret0, _ := ret[0].(domain.BinaryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinaryData indicates an expected call of GetBinaryData.
func (mr *MockKeeperMockRecorder) GetBinaryData(ctx, dataCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryData", reflect.TypeOf((*MockKeeper)(nil).GetBinaryData), ctx, dataCtx)
}

// GetCredentialsData mocks base method.
func (m *MockKeeper) GetCredentialsData(ctx context.Context, dataCtx domain.DataContext) (domain.CredentialsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsData", ctx, dataCtx)
	ret0, _ := ret[0].(domain.CredentialsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsData indicates an expected call of GetCredentialsData.
func (mr *MockKeeperMockRecorder) GetCredentialsData(ctx, dataCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsData", reflect.TypeOf((*MockKeeper)(nil).GetCredentialsData), ctx, dataCtx)
}

// GetTextData mocks base method.
func (m *MockKeeper) GetTextData(ctx context.Context, dataCtx domain.DataContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextData", ctx, dataCtx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextData indicates an expected call of GetTextData.
func (mr *MockKeeperMockRecorder) GetTextData(ctx, dataCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextData", reflect.TypeOf((*MockKeeper)(nil).GetTextData), ctx, dataCtx)
}

// ListAll mocks base method.
func (m *MockKeeper) ListAll(ctx context.Context, id domain.UserID) ([]domain.DataContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, id)
	ret0, _ := ret[0].([]domain.DataContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockKeeperMockRecorder) ListAll(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockKeeper)(nil).ListAll), ctx, id)
}

// SetBankData mocks base method.
func (m *MockKeeper) SetBankData(ctx context.Context, data domain.BankData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBankData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBankData indicates an expected call of SetBankData.
func (mr *MockKeeperMockRecorder) SetBankData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBankData", reflect.TypeOf((*MockKeeper)(nil).SetBankData), ctx, data)
}

// SetBinaryData mocks base method.
func (m *MockKeeper) SetBinaryData(ctx context.Context, data domain.BinaryData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBinaryData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBinaryData indicates an expected call of SetBinaryData.
func (mr *MockKeeperMockRecorder) SetBinaryData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBinaryData", reflect.TypeOf((*MockKeeper)(nil).SetBinaryData), ctx, data)
}

// SetCredentialsData mocks base method.
func (m *MockKeeper) SetCredentialsData(ctx context.Context, data domain.CredentialsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCredentialsData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCredentialsData indicates an expected call of SetCredentialsData.
func (mr *MockKeeperMockRecorder) SetCredentialsData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCredentialsData", reflect.TypeOf((*MockKeeper)(nil).SetCredentialsData), ctx, data)
}

// SetTextData mocks base method.
func (m *MockKeeper) SetTextData(ctx context.Context, data domain.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTextData", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTextData indicates an expected call of SetTextData.
func (mr *MockKeeperMockRecorder) SetTextData(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTextData", reflect.TypeOf((*MockKeeper)(nil).SetTextData), ctx, data)
}

// MockKeeperRepository is a mock of KeeperRepository interface.
type MockKeeperRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperRepositoryMockRecorder
}

// MockKeeperRepositoryMockRecorder is the mock recorder for MockKeeperRepository.
type MockKeeperRepositoryMockRecorder struct {
	mock *MockKeeperRepository
}

// NewMockKeeperRepository creates a new mock instance.
func NewMockKeeperRepository(ctrl *gomock.Controller) *MockKeeperRepository {
	mock := &MockKeeperRepository{ctrl: ctrl}
	mock.recorder = &MockKeeperRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperRepository) EXPECT() *MockKeeperRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeeperRepository) Delete(ctx context.Context, dataCtx domain.DataContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, dataCtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeeperRepositoryMockRecorder) Delete(ctx, dataCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeeperRepository)(nil).Delete), ctx, dataCtx)
}

// GetAllData mocks base method.
func (m *MockKeeperRepository) GetAllData(ctx context.Context, userID domain.UserID) ([]domain.DataContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllData", ctx, userID)
	ret0, _ := ret[0].([]domain.DataContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllData indicates an expected call of GetAllData.
func (mr *MockKeeperRepositoryMockRecorder) GetAllData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllData", reflect.TypeOf((*MockKeeperRepository)(nil).GetAllData), ctx, userID)
}

// GetData mocks base method.
func (m *MockKeeperRepository) GetData(ctx context.Context, dataCtx domain.DataContext) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, dataCtx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockKeeperRepositoryMockRecorder) GetData(ctx, dataCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockKeeperRepository)(nil).GetData), ctx, dataCtx)
}

// GetMeta mocks base method.
func (m *MockKeeperRepository) GetMeta(ctx context.Context, userID domain.UserID, id domain.DataID) (domain.DataContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", ctx, userID, id)
	ret0, _ := ret[0].(domain.DataContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockKeeperRepositoryMockRecorder) GetMeta(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockKeeperRepository)(nil).GetMeta), ctx, userID, id)
}

// Set mocks base method.
func (m *MockKeeperRepository) Set(ctx context.Context, dataCtx domain.DataContext, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, dataCtx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKeeperRepositoryMockRecorder) Set(ctx, dataCtx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeeperRepository)(nil).Set), ctx, dataCtx, data)
}
